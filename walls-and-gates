public class Solution {

    private static final int WALL = -1;
    private static final int GATE = 0;
    private static final int INF = 1 << 31 - 1;

    // -1: Wall
    // 0: A gate
    // INF = 2^31 - 1 is an empty room
    // After running the method, each room that can reach a gate should have the distance of the nearest gate
    public void nearestGates(int[][] grid) {
        final var connected = new LinkedList<int[]>;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                if (grid[i][j] == GATE) {
                    connected.add(new int[]{i, j});
                }
            }
        }

        while (!connected.isEmpty()) {
            var cell = connected.removeFirst();
            var x = cell[0];
            var y = cell[1];
            if (x-1 >= 0 && grid[x-1][y] == INF) {
                grid[x-1][y] = grid[x][y] + 1;
                connected.add(new int[]{x-1, y});
            }
            if (x+1 < grid.length && grid[x+1][y] == INF) {
                grid[x+1][y] = grid[x][y] + 1;
                connected.add(new int[]{x+1, y});
            }
            if (y-1 >= 0 && grid[x][y-1] == INF) {
                grid[x][y-1] = grid[x][y] + 1;
                connected.add(new int[]{x, y-1});
            }
            if (y+1 < grid[0].length && grid[x][y+1] == INF) {
                grid[x][y+1] = grid[x][y] + 1;
                connected.add(new int[]{x, y+1});
            }
        }
    }
}

